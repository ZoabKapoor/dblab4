package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    
    private DbIterator outerIterator;
    private DbIterator innerIterator;
    private TupleDesc resultTupleDesc;
    private JoinPredicate joinPredicate;
    // We need to keep track of the outer tuple between calls to 
    // fetchNext(), so we can't have it be a local variable in fetchNext()
    private Tuple outerTuple;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        joinPredicate = p;
        outerIterator = child1;
        innerIterator = child2;
        resultTupleDesc = TupleDesc.merge(outerIterator.getTupleDesc(), innerIterator.getTupleDesc());
        outerTuple = null;
    }

    public JoinPredicate getJoinPredicate() {
        return joinPredicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
    	return outerIterator.getTupleDesc().getFieldName(joinPredicate.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        return innerIterator.getTupleDesc().getFieldName(joinPredicate.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return resultTupleDesc;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
    	outerIterator.open();
    	innerIterator.open();
    	super.open();
    }

    public void close() {
        super.close();
        innerIterator.close();
        outerIterator.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        outerIterator.rewind();
        innerIterator.rewind();
        outerTuple = null;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        while (outerIterator.hasNext() || outerTuple != null) {
        	if (outerTuple == null) {
        		outerTuple = outerIterator.next();
        	}
        	while (innerIterator.hasNext()) {
        		Tuple innerTuple = innerIterator.next();
        		if (joinPredicate.filter(outerTuple, innerTuple)) {
        			Tuple result = new Tuple(resultTupleDesc);
        			Iterator<Field> outerTupleIterator = outerTuple.fields();
        			Iterator<Field> innerTupleIterator = innerTuple.fields();
        			for (int i = 0; i < resultTupleDesc.numFields(); ++i) {
        				if (outerTupleIterator.hasNext()) {
        					result.setField(i, outerTupleIterator.next());
        				} else {
        					result.setField(i, innerTupleIterator.next());
        				}
        			}
        			return result;
        		}
        	}
        	innerIterator.rewind();
        	outerTuple = null;
        }
        return null;
    }

    @Override
    public DbIterator[] getChildren() {
        return new DbIterator[] { outerIterator, innerIterator };
    }

    @Override
    public void setChildren(DbIterator[] children) {
        outerIterator = children[0];
        innerIterator = children[1];
        resultTupleDesc = TupleDesc.merge(outerIterator.getTupleDesc(), innerIterator.getTupleDesc());
    }

}
